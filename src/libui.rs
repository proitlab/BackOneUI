/* automatically generated by rust-bindgen 0.59.2 */

pub const uiPi: f64 = 3.141592653589793;
pub const uiDrawDefaultMiterLimit: f64 = 10.0;
pub const uiTableModelColumnNeverEditable: i32 = -1;
pub const uiTableModelColumnAlwaysEditable: i32 = -2;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type uiForEach = ::std::os::raw::c_uint;
pub const uiForEachContinue: ::std::os::raw::c_uint = 0;
pub const uiForEachStop: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiInitOptions {
    pub Size: usize,
}
extern "C" {
    pub fn uiInit(options: *mut uiInitOptions) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiUninit();
}
extern "C" {
    pub fn uiFreeInitError(err: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiMain();
}
extern "C" {
    pub fn uiMainSteps();
}
extern "C" {
    pub fn uiMainStep(wait: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiQuit();
}
extern "C" {
    pub fn uiQueueMain(
        f: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiTimer(
        milliseconds: ::std::os::raw::c_int,
        f: ::std::option::Option<
            unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiOnShouldQuit(
        f: ::std::option::Option<
            unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiFreeText(text: *mut ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiControl {
    pub Signature: u32,
    pub OSSignature: u32,
    pub TypeSignature: u32,
    pub Destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl)>,
    pub Handle: ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl) -> usize>,
    pub Parent: ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl) -> *mut uiControl>,
    pub SetParent:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl, arg2: *mut uiControl)>,
    pub Toplevel:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl) -> ::std::os::raw::c_int>,
    pub Visible:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl) -> ::std::os::raw::c_int>,
    pub Show: ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl)>,
    pub Hide: ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl)>,
    pub Enabled:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl) -> ::std::os::raw::c_int>,
    pub Enable: ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl)>,
    pub Disable: ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiControl)>,
}
extern "C" {
    pub fn uiControlDestroy(arg1: *mut uiControl);
}
extern "C" {
    pub fn uiControlHandle(arg1: *mut uiControl) -> usize;
}
extern "C" {
    pub fn uiControlParent(arg1: *mut uiControl) -> *mut uiControl;
}
extern "C" {
    pub fn uiControlSetParent(arg1: *mut uiControl, arg2: *mut uiControl);
}
extern "C" {
    pub fn uiControlToplevel(arg1: *mut uiControl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiControlVisible(arg1: *mut uiControl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiControlShow(arg1: *mut uiControl);
}
extern "C" {
    pub fn uiControlHide(arg1: *mut uiControl);
}
extern "C" {
    pub fn uiControlEnabled(arg1: *mut uiControl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiControlEnable(arg1: *mut uiControl);
}
extern "C" {
    pub fn uiControlDisable(arg1: *mut uiControl);
}
extern "C" {
    pub fn uiAllocControl(
        n: usize,
        OSsig: u32,
        typesig: u32,
        typenamestr: *const ::std::os::raw::c_char,
    ) -> *mut uiControl;
}
extern "C" {
    pub fn uiFreeControl(arg1: *mut uiControl);
}
extern "C" {
    pub fn uiControlVerifySetParent(arg1: *mut uiControl, arg2: *mut uiControl);
}
extern "C" {
    pub fn uiControlEnabledToUser(arg1: *mut uiControl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiUserBugCannotSetParentOnToplevel(type_: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiWindow {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiWindowTitle(w: *mut uiWindow) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiWindowSetTitle(w: *mut uiWindow, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiWindowContentSize(
        w: *mut uiWindow,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiWindowSetContentSize(
        w: *mut uiWindow,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiWindowFullscreen(w: *mut uiWindow) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiWindowSetFullscreen(w: *mut uiWindow, fullscreen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiWindowBorderless(w: *mut uiWindow) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiWindowSetBorderless(w: *mut uiWindow, borderless: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiWindowSetChild(w: *mut uiWindow, child: *mut uiControl);
}
extern "C" {
    pub fn uiWindowMargined(w: *mut uiWindow) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiWindowSetMargined(w: *mut uiWindow, margined: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiWindowResizeable(w: *mut uiWindow) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiWindowSetResizeable(w: *mut uiWindow, resizeable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiNewWindow(
        title: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        hasMenubar: ::std::os::raw::c_int,
    ) -> *mut uiWindow;
}
extern "C" {
    pub fn uiWindowOnContentSizeChanged(
        w: *mut uiWindow,
        f: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut uiWindow, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiWindowOnClosing(
        w: *mut uiWindow,
        f: ::std::option::Option<
            unsafe extern "C" fn(
                w: *mut uiWindow,
                data: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiWindowOnFocusChanged(
        w: *mut uiWindow,
        f: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut uiWindow, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiWindowFocused(w: *mut uiWindow) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiButton {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiButtonText(b: *mut uiButton) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiButtonSetText(b: *mut uiButton, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiButtonOnClicked(
        b: *mut uiButton,
        f: ::std::option::Option<
            unsafe extern "C" fn(b: *mut uiButton, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiNewButton(text: *const ::std::os::raw::c_char) -> *mut uiButton;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiBox {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiBoxAppend(b: *mut uiBox, child: *mut uiControl, stretchy: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiBoxNumChildren(b: *mut uiBox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiBoxDelete(b: *mut uiBox, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiBoxPadded(b: *mut uiBox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiBoxSetPadded(b: *mut uiBox, padded: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiNewHorizontalBox() -> *mut uiBox;
}
extern "C" {
    pub fn uiNewVerticalBox() -> *mut uiBox;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiCheckbox {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiCheckboxText(c: *mut uiCheckbox) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiCheckboxSetText(c: *mut uiCheckbox, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiCheckboxOnToggled(
        c: *mut uiCheckbox,
        f: ::std::option::Option<
            unsafe extern "C" fn(c: *mut uiCheckbox, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiCheckboxChecked(c: *mut uiCheckbox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiCheckboxSetChecked(c: *mut uiCheckbox, checked: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiNewCheckbox(text: *const ::std::os::raw::c_char) -> *mut uiCheckbox;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiEntry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiEntryText(e: *mut uiEntry) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiEntrySetText(e: *mut uiEntry, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiEntryOnChanged(
        e: *mut uiEntry,
        f: ::std::option::Option<
            unsafe extern "C" fn(e: *mut uiEntry, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiEntryReadOnly(e: *mut uiEntry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiEntrySetReadOnly(e: *mut uiEntry, readonly: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiNewEntry() -> *mut uiEntry;
}
extern "C" {
    pub fn uiNewPasswordEntry() -> *mut uiEntry;
}
extern "C" {
    pub fn uiNewSearchEntry() -> *mut uiEntry;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiLabel {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiLabelText(l: *mut uiLabel) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiLabelSetText(l: *mut uiLabel, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiNewLabel(text: *const ::std::os::raw::c_char) -> *mut uiLabel;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiTab {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiTabAppend(t: *mut uiTab, name: *const ::std::os::raw::c_char, c: *mut uiControl);
}
extern "C" {
    pub fn uiTabInsertAt(
        t: *mut uiTab,
        name: *const ::std::os::raw::c_char,
        before: ::std::os::raw::c_int,
        c: *mut uiControl,
    );
}
extern "C" {
    pub fn uiTabDelete(t: *mut uiTab, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiTabNumPages(t: *mut uiTab) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiTabMargined(t: *mut uiTab, page: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiTabSetMargined(
        t: *mut uiTab,
        page: ::std::os::raw::c_int,
        margined: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiNewTab() -> *mut uiTab;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiGroup {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiGroupTitle(g: *mut uiGroup) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiGroupSetTitle(g: *mut uiGroup, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiGroupSetChild(g: *mut uiGroup, c: *mut uiControl);
}
extern "C" {
    pub fn uiGroupMargined(g: *mut uiGroup) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiGroupSetMargined(g: *mut uiGroup, margined: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiNewGroup(title: *const ::std::os::raw::c_char) -> *mut uiGroup;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiSpinbox {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiSpinboxValue(s: *mut uiSpinbox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiSpinboxSetValue(s: *mut uiSpinbox, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiSpinboxOnChanged(
        s: *mut uiSpinbox,
        f: ::std::option::Option<
            unsafe extern "C" fn(s: *mut uiSpinbox, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiNewSpinbox(min: ::std::os::raw::c_int, max: ::std::os::raw::c_int) -> *mut uiSpinbox;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiSlider {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiSliderValue(s: *mut uiSlider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiSliderSetValue(s: *mut uiSlider, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiSliderHasToolTip(s: *mut uiSlider) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiSliderSetHasToolTip(s: *mut uiSlider, hasToolTip: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiSliderOnChanged(
        s: *mut uiSlider,
        f: ::std::option::Option<
            unsafe extern "C" fn(s: *mut uiSlider, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiSliderOnReleased(
        s: *mut uiSlider,
        f: ::std::option::Option<
            unsafe extern "C" fn(s: *mut uiSlider, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiSliderSetRange(
        s: *mut uiSlider,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiNewSlider(min: ::std::os::raw::c_int, max: ::std::os::raw::c_int) -> *mut uiSlider;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiProgressBar {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiProgressBarValue(p: *mut uiProgressBar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiProgressBarSetValue(p: *mut uiProgressBar, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiNewProgressBar() -> *mut uiProgressBar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiSeparator {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiNewHorizontalSeparator() -> *mut uiSeparator;
}
extern "C" {
    pub fn uiNewVerticalSeparator() -> *mut uiSeparator;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiCombobox {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiComboboxAppend(c: *mut uiCombobox, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiComboboxInsertAt(
        c: *mut uiCombobox,
        n: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn uiComboboxDelete(c: *mut uiCombobox, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiComboboxClear(c: *mut uiCombobox);
}
extern "C" {
    pub fn uiComboboxNumItems(c: *mut uiCombobox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiComboboxSelected(c: *mut uiCombobox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiComboboxSetSelected(c: *mut uiCombobox, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiComboboxOnSelected(
        c: *mut uiCombobox,
        f: ::std::option::Option<
            unsafe extern "C" fn(c: *mut uiCombobox, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiNewCombobox() -> *mut uiCombobox;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiEditableCombobox {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiEditableComboboxAppend(
        c: *mut uiEditableCombobox,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn uiEditableComboboxText(c: *mut uiEditableCombobox) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiEditableComboboxSetText(
        c: *mut uiEditableCombobox,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn uiEditableComboboxOnChanged(
        c: *mut uiEditableCombobox,
        f: ::std::option::Option<
            unsafe extern "C" fn(c: *mut uiEditableCombobox, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiNewEditableCombobox() -> *mut uiEditableCombobox;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiRadioButtons {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiRadioButtonsAppend(r: *mut uiRadioButtons, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiRadioButtonsSelected(r: *mut uiRadioButtons) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiRadioButtonsSetSelected(r: *mut uiRadioButtons, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiRadioButtonsOnSelected(
        r: *mut uiRadioButtons,
        f: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut uiRadioButtons, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiNewRadioButtons() -> *mut uiRadioButtons;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiDateTimePicker {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiDateTimePickerTime(d: *mut uiDateTimePicker, time: *mut tm);
}
extern "C" {
    pub fn uiDateTimePickerSetTime(d: *mut uiDateTimePicker, time: *const tm);
}
extern "C" {
    pub fn uiDateTimePickerOnChanged(
        d: *mut uiDateTimePicker,
        f: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut uiDateTimePicker, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiNewDateTimePicker() -> *mut uiDateTimePicker;
}
extern "C" {
    pub fn uiNewDatePicker() -> *mut uiDateTimePicker;
}
extern "C" {
    pub fn uiNewTimePicker() -> *mut uiDateTimePicker;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiMultilineEntry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiMultilineEntryText(e: *mut uiMultilineEntry) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiMultilineEntrySetText(e: *mut uiMultilineEntry, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiMultilineEntryAppend(e: *mut uiMultilineEntry, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn uiMultilineEntryOnChanged(
        e: *mut uiMultilineEntry,
        f: ::std::option::Option<
            unsafe extern "C" fn(e: *mut uiMultilineEntry, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiMultilineEntryReadOnly(e: *mut uiMultilineEntry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiMultilineEntrySetReadOnly(e: *mut uiMultilineEntry, readonly: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiNewMultilineEntry() -> *mut uiMultilineEntry;
}
extern "C" {
    pub fn uiNewNonWrappingMultilineEntry() -> *mut uiMultilineEntry;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiMenuItem {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiMenuItemEnable(m: *mut uiMenuItem);
}
extern "C" {
    pub fn uiMenuItemDisable(m: *mut uiMenuItem);
}
extern "C" {
    pub fn uiMenuItemOnClicked(
        m: *mut uiMenuItem,
        f: ::std::option::Option<
            unsafe extern "C" fn(
                sender: *mut uiMenuItem,
                window: *mut uiWindow,
                data: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiMenuItemChecked(m: *mut uiMenuItem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiMenuItemSetChecked(m: *mut uiMenuItem, checked: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiMenu {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiMenuAppendItem(m: *mut uiMenu, name: *const ::std::os::raw::c_char)
        -> *mut uiMenuItem;
}
extern "C" {
    pub fn uiMenuAppendCheckItem(
        m: *mut uiMenu,
        name: *const ::std::os::raw::c_char,
    ) -> *mut uiMenuItem;
}
extern "C" {
    pub fn uiMenuAppendQuitItem(m: *mut uiMenu) -> *mut uiMenuItem;
}
extern "C" {
    pub fn uiMenuAppendPreferencesItem(m: *mut uiMenu) -> *mut uiMenuItem;
}
extern "C" {
    pub fn uiMenuAppendAboutItem(m: *mut uiMenu) -> *mut uiMenuItem;
}
extern "C" {
    pub fn uiMenuAppendSeparator(m: *mut uiMenu);
}
extern "C" {
    pub fn uiNewMenu(name: *const ::std::os::raw::c_char) -> *mut uiMenu;
}
extern "C" {
    pub fn uiOpenFile(parent: *mut uiWindow) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiOpenFolder(parent: *mut uiWindow) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiSaveFile(parent: *mut uiWindow) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiMsgBox(
        parent: *mut uiWindow,
        title: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn uiMsgBoxError(
        parent: *mut uiWindow,
        title: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiArea {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiDrawContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiAreaHandler {
    pub Draw: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut uiAreaHandler,
            arg2: *mut uiArea,
            arg3: *mut uiAreaDrawParams,
        ),
    >,
    pub MouseEvent: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut uiAreaHandler,
            arg2: *mut uiArea,
            arg3: *mut uiAreaMouseEvent,
        ),
    >,
    pub MouseCrossed: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut uiAreaHandler,
            arg2: *mut uiArea,
            left: ::std::os::raw::c_int,
        ),
    >,
    pub DragBroken:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut uiAreaHandler, arg2: *mut uiArea)>,
    pub KeyEvent: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut uiAreaHandler,
            arg2: *mut uiArea,
            arg3: *mut uiAreaKeyEvent,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type uiWindowResizeEdge = ::std::os::raw::c_uint;
pub const uiWindowResizeEdgeLeft: ::std::os::raw::c_uint = 0;
pub const uiWindowResizeEdgeTop: ::std::os::raw::c_uint = 1;
pub const uiWindowResizeEdgeRight: ::std::os::raw::c_uint = 2;
pub const uiWindowResizeEdgeBottom: ::std::os::raw::c_uint = 3;
pub const uiWindowResizeEdgeTopLeft: ::std::os::raw::c_uint = 4;
pub const uiWindowResizeEdgeTopRight: ::std::os::raw::c_uint = 5;
pub const uiWindowResizeEdgeBottomLeft: ::std::os::raw::c_uint = 6;
pub const uiWindowResizeEdgeBottomRight: ::std::os::raw::c_uint = 7;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
extern "C" {
    pub fn uiAreaSetSize(
        a: *mut uiArea,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiAreaQueueRedrawAll(a: *mut uiArea);
}
extern "C" {
    pub fn uiAreaScrollTo(a: *mut uiArea, x: f64, y: f64, width: f64, height: f64);
}
extern "C" {
    pub fn uiAreaBeginUserWindowMove(a: *mut uiArea);
}
extern "C" {
    pub fn uiAreaBeginUserWindowResize(a: *mut uiArea, edge: uiWindowResizeEdge);
}
extern "C" {
    pub fn uiNewArea(ah: *mut uiAreaHandler) -> *mut uiArea;
}
extern "C" {
    pub fn uiNewScrollingArea(
        ah: *mut uiAreaHandler,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> *mut uiArea;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiAreaDrawParams {
    pub Context: *mut uiDrawContext,
    pub AreaWidth: f64,
    pub AreaHeight: f64,
    pub ClipX: f64,
    pub ClipY: f64,
    pub ClipWidth: f64,
    pub ClipHeight: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiDrawPath {
    _unused: [u8; 0],
}
pub type uiDrawBrushType = ::std::os::raw::c_uint;
pub const uiDrawBrushTypeSolid: ::std::os::raw::c_uint = 0;
pub const uiDrawBrushTypeLinearGradient: ::std::os::raw::c_uint = 1;
pub const uiDrawBrushTypeRadialGradient: ::std::os::raw::c_uint = 2;
pub const uiDrawBrushTypeImage: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub type uiDrawLineCap = ::std::os::raw::c_uint;
pub const uiDrawLineCapFlat: ::std::os::raw::c_uint = 0;
pub const uiDrawLineCapRound: ::std::os::raw::c_uint = 1;
pub const uiDrawLineCapSquare: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub type uiDrawLineJoin = ::std::os::raw::c_uint;
pub const uiDrawLineJoinMiter: ::std::os::raw::c_uint = 0;
pub const uiDrawLineJoinRound: ::std::os::raw::c_uint = 1;
pub const uiDrawLineJoinBevel: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type uiDrawFillMode = ::std::os::raw::c_uint;
pub const uiDrawFillModeWinding: ::std::os::raw::c_uint = 0;
pub const uiDrawFillModeAlternate: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiDrawMatrix {
    pub M11: f64,
    pub M12: f64,
    pub M21: f64,
    pub M22: f64,
    pub M31: f64,
    pub M32: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiDrawBrush {
    pub Type: uiDrawBrushType,
    pub R: f64,
    pub G: f64,
    pub B: f64,
    pub A: f64,
    pub X0: f64,
    pub Y0: f64,
    pub X1: f64,
    pub Y1: f64,
    pub OuterRadius: f64,
    pub Stops: *mut uiDrawBrushGradientStop,
    pub NumStops: usize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiDrawBrushGradientStop {
    pub Pos: f64,
    pub R: f64,
    pub G: f64,
    pub B: f64,
    pub A: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiDrawStrokeParams {
    pub Cap: uiDrawLineCap,
    pub Join: uiDrawLineJoin,
    pub Thickness: f64,
    pub MiterLimit: f64,
    pub Dashes: *mut f64,
    pub NumDashes: usize,
    pub DashPhase: f64,
}
extern "C" {
    pub fn uiDrawNewPath(fillMode: uiDrawFillMode) -> *mut uiDrawPath;
}
extern "C" {
    pub fn uiDrawFreePath(p: *mut uiDrawPath);
}
extern "C" {
    pub fn uiDrawPathNewFigure(p: *mut uiDrawPath, x: f64, y: f64);
}
extern "C" {
    pub fn uiDrawPathNewFigureWithArc(
        p: *mut uiDrawPath,
        xCenter: f64,
        yCenter: f64,
        radius: f64,
        startAngle: f64,
        sweep: f64,
        negative: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiDrawPathLineTo(p: *mut uiDrawPath, x: f64, y: f64);
}
extern "C" {
    pub fn uiDrawPathArcTo(
        p: *mut uiDrawPath,
        xCenter: f64,
        yCenter: f64,
        radius: f64,
        startAngle: f64,
        sweep: f64,
        negative: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiDrawPathBezierTo(
        p: *mut uiDrawPath,
        c1x: f64,
        c1y: f64,
        c2x: f64,
        c2y: f64,
        endX: f64,
        endY: f64,
    );
}
extern "C" {
    pub fn uiDrawPathCloseFigure(p: *mut uiDrawPath);
}
extern "C" {
    pub fn uiDrawPathAddRectangle(p: *mut uiDrawPath, x: f64, y: f64, width: f64, height: f64);
}
extern "C" {
    pub fn uiDrawPathEnded(p: *mut uiDrawPath) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiDrawPathEnd(p: *mut uiDrawPath);
}
extern "C" {
    pub fn uiDrawStroke(
        c: *mut uiDrawContext,
        path: *mut uiDrawPath,
        b: *mut uiDrawBrush,
        p: *mut uiDrawStrokeParams,
    );
}
extern "C" {
    pub fn uiDrawFill(c: *mut uiDrawContext, path: *mut uiDrawPath, b: *mut uiDrawBrush);
}
extern "C" {
    pub fn uiDrawMatrixSetIdentity(m: *mut uiDrawMatrix);
}
extern "C" {
    pub fn uiDrawMatrixTranslate(m: *mut uiDrawMatrix, x: f64, y: f64);
}
extern "C" {
    pub fn uiDrawMatrixScale(m: *mut uiDrawMatrix, xCenter: f64, yCenter: f64, x: f64, y: f64);
}
extern "C" {
    pub fn uiDrawMatrixRotate(m: *mut uiDrawMatrix, x: f64, y: f64, amount: f64);
}
extern "C" {
    pub fn uiDrawMatrixSkew(m: *mut uiDrawMatrix, x: f64, y: f64, xamount: f64, yamount: f64);
}
extern "C" {
    pub fn uiDrawMatrixMultiply(dest: *mut uiDrawMatrix, src: *mut uiDrawMatrix);
}
extern "C" {
    pub fn uiDrawMatrixInvertible(m: *mut uiDrawMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiDrawMatrixInvert(m: *mut uiDrawMatrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiDrawMatrixTransformPoint(m: *mut uiDrawMatrix, x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn uiDrawMatrixTransformSize(m: *mut uiDrawMatrix, x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn uiDrawTransform(c: *mut uiDrawContext, m: *mut uiDrawMatrix);
}
extern "C" {
    pub fn uiDrawClip(c: *mut uiDrawContext, path: *mut uiDrawPath);
}
extern "C" {
    pub fn uiDrawSave(c: *mut uiDrawContext);
}
extern "C" {
    pub fn uiDrawRestore(c: *mut uiDrawContext);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiAttribute {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiFreeAttribute(a: *mut uiAttribute);
}
pub type uiAttributeType = ::std::os::raw::c_uint;
pub const uiAttributeTypeFamily: ::std::os::raw::c_uint = 0;
pub const uiAttributeTypeSize: ::std::os::raw::c_uint = 1;
pub const uiAttributeTypeWeight: ::std::os::raw::c_uint = 2;
pub const uiAttributeTypeItalic: ::std::os::raw::c_uint = 3;
pub const uiAttributeTypeStretch: ::std::os::raw::c_uint = 4;
pub const uiAttributeTypeColor: ::std::os::raw::c_uint = 5;
pub const uiAttributeTypeBackground: ::std::os::raw::c_uint = 6;
pub const uiAttributeTypeUnderline: ::std::os::raw::c_uint = 7;
pub const uiAttributeTypeUnderlineColor: ::std::os::raw::c_uint = 8;
pub const uiAttributeTypeFeatures: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
extern "C" {
    pub fn uiAttributeGetType(a: *const uiAttribute) -> uiAttributeType;
}
extern "C" {
    pub fn uiNewFamilyAttribute(family: *const ::std::os::raw::c_char) -> *mut uiAttribute;
}
extern "C" {
    pub fn uiAttributeFamily(a: *const uiAttribute) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiNewSizeAttribute(size: f64) -> *mut uiAttribute;
}
extern "C" {
    pub fn uiAttributeSize(a: *const uiAttribute) -> f64;
}
pub type uiTextWeight = ::std::os::raw::c_uint;
pub const uiTextWeightMinimum: ::std::os::raw::c_uint = 0;
pub const uiTextWeightThin: ::std::os::raw::c_uint = 100;
pub const uiTextWeightUltraLight: ::std::os::raw::c_uint = 200;
pub const uiTextWeightLight: ::std::os::raw::c_uint = 300;
pub const uiTextWeightBook: ::std::os::raw::c_uint = 350;
pub const uiTextWeightNormal: ::std::os::raw::c_uint = 400;
pub const uiTextWeightMedium: ::std::os::raw::c_uint = 500;
pub const uiTextWeightSemiBold: ::std::os::raw::c_uint = 600;
pub const uiTextWeightBold: ::std::os::raw::c_uint = 700;
pub const uiTextWeightUltraBold: ::std::os::raw::c_uint = 800;
pub const uiTextWeightHeavy: ::std::os::raw::c_uint = 900;
pub const uiTextWeightUltraHeavy: ::std::os::raw::c_uint = 950;
pub const uiTextWeightMaximum: ::std::os::raw::c_uint = 1000;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
extern "C" {
    pub fn uiNewWeightAttribute(weight: uiTextWeight) -> *mut uiAttribute;
}
extern "C" {
    pub fn uiAttributeWeight(a: *const uiAttribute) -> uiTextWeight;
}
pub type uiTextItalic = ::std::os::raw::c_uint;
pub const uiTextItalicNormal: ::std::os::raw::c_uint = 0;
pub const uiTextItalicOblique: ::std::os::raw::c_uint = 1;
pub const uiTextItalicItalic: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
extern "C" {
    pub fn uiNewItalicAttribute(italic: uiTextItalic) -> *mut uiAttribute;
}
extern "C" {
    pub fn uiAttributeItalic(a: *const uiAttribute) -> uiTextItalic;
}
pub type uiTextStretch = ::std::os::raw::c_uint;
pub const uiTextStretchUltraCondensed: ::std::os::raw::c_uint = 0;
pub const uiTextStretchExtraCondensed: ::std::os::raw::c_uint = 1;
pub const uiTextStretchCondensed: ::std::os::raw::c_uint = 2;
pub const uiTextStretchSemiCondensed: ::std::os::raw::c_uint = 3;
pub const uiTextStretchNormal: ::std::os::raw::c_uint = 4;
pub const uiTextStretchSemiExpanded: ::std::os::raw::c_uint = 5;
pub const uiTextStretchExpanded: ::std::os::raw::c_uint = 6;
pub const uiTextStretchExtraExpanded: ::std::os::raw::c_uint = 7;
pub const uiTextStretchUltraExpanded: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn uiNewStretchAttribute(stretch: uiTextStretch) -> *mut uiAttribute;
}
extern "C" {
    pub fn uiAttributeStretch(a: *const uiAttribute) -> uiTextStretch;
}
extern "C" {
    pub fn uiNewColorAttribute(r: f64, g: f64, b: f64, a: f64) -> *mut uiAttribute;
}
extern "C" {
    pub fn uiAttributeColor(
        a: *const uiAttribute,
        r: *mut f64,
        g: *mut f64,
        b: *mut f64,
        alpha: *mut f64,
    );
}
extern "C" {
    pub fn uiNewBackgroundAttribute(r: f64, g: f64, b: f64, a: f64) -> *mut uiAttribute;
}
pub type uiUnderline = ::std::os::raw::c_uint;
pub const uiUnderlineNone: ::std::os::raw::c_uint = 0;
pub const uiUnderlineSingle: ::std::os::raw::c_uint = 1;
pub const uiUnderlineDouble: ::std::os::raw::c_uint = 2;
pub const uiUnderlineSuggestion: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
extern "C" {
    pub fn uiNewUnderlineAttribute(u: uiUnderline) -> *mut uiAttribute;
}
extern "C" {
    pub fn uiAttributeUnderline(a: *const uiAttribute) -> uiUnderline;
}
pub type uiUnderlineColor = ::std::os::raw::c_uint;
pub const uiUnderlineColorCustom: ::std::os::raw::c_uint = 0;
pub const uiUnderlineColorSpelling: ::std::os::raw::c_uint = 1;
pub const uiUnderlineColorGrammar: ::std::os::raw::c_uint = 2;
pub const uiUnderlineColorAuxiliary: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
extern "C" {
    pub fn uiNewUnderlineColorAttribute(
        u: uiUnderlineColor,
        r: f64,
        g: f64,
        b: f64,
        a: f64,
    ) -> *mut uiAttribute;
}
extern "C" {
    pub fn uiAttributeUnderlineColor(
        a: *const uiAttribute,
        u: *mut uiUnderlineColor,
        r: *mut f64,
        g: *mut f64,
        b: *mut f64,
        alpha: *mut f64,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiOpenTypeFeatures {
    _unused: [u8; 0],
}
pub type uiOpenTypeFeaturesForEachFunc = ::std::option::Option<
    unsafe extern "C" fn(
        otf: *const uiOpenTypeFeatures,
        a: ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
        d: ::std::os::raw::c_char,
        value: u32,
        data: *mut ::std::os::raw::c_void,
    ) -> uiForEach,
>;
extern "C" {
    pub fn uiNewOpenTypeFeatures() -> *mut uiOpenTypeFeatures;
}
extern "C" {
    pub fn uiFreeOpenTypeFeatures(otf: *mut uiOpenTypeFeatures);
}
extern "C" {
    pub fn uiOpenTypeFeaturesClone(otf: *const uiOpenTypeFeatures) -> *mut uiOpenTypeFeatures;
}
extern "C" {
    pub fn uiOpenTypeFeaturesAdd(
        otf: *mut uiOpenTypeFeatures,
        a: ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
        d: ::std::os::raw::c_char,
        value: u32,
    );
}
extern "C" {
    pub fn uiOpenTypeFeaturesRemove(
        otf: *mut uiOpenTypeFeatures,
        a: ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
        d: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn uiOpenTypeFeaturesGet(
        otf: *const uiOpenTypeFeatures,
        a: ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
        d: ::std::os::raw::c_char,
        value: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiOpenTypeFeaturesForEach(
        otf: *const uiOpenTypeFeatures,
        f: uiOpenTypeFeaturesForEachFunc,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiNewFeaturesAttribute(otf: *const uiOpenTypeFeatures) -> *mut uiAttribute;
}
extern "C" {
    pub fn uiAttributeFeatures(a: *const uiAttribute) -> *const uiOpenTypeFeatures;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiAttributedString {
    _unused: [u8; 0],
}
pub type uiAttributedStringForEachAttributeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        s: *const uiAttributedString,
        a: *const uiAttribute,
        start: usize,
        end: usize,
        data: *mut ::std::os::raw::c_void,
    ) -> uiForEach,
>;
extern "C" {
    pub fn uiNewAttributedString(
        initialString: *const ::std::os::raw::c_char,
    ) -> *mut uiAttributedString;
}
extern "C" {
    pub fn uiFreeAttributedString(s: *mut uiAttributedString);
}
extern "C" {
    pub fn uiAttributedStringString(s: *const uiAttributedString) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiAttributedStringLen(s: *const uiAttributedString) -> usize;
}
extern "C" {
    pub fn uiAttributedStringAppendUnattributed(
        s: *mut uiAttributedString,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn uiAttributedStringInsertAtUnattributed(
        s: *mut uiAttributedString,
        str_: *const ::std::os::raw::c_char,
        at: usize,
    );
}
extern "C" {
    pub fn uiAttributedStringDelete(s: *mut uiAttributedString, start: usize, end: usize);
}
extern "C" {
    pub fn uiAttributedStringSetAttribute(
        s: *mut uiAttributedString,
        a: *mut uiAttribute,
        start: usize,
        end: usize,
    );
}
extern "C" {
    pub fn uiAttributedStringForEachAttribute(
        s: *const uiAttributedString,
        f: uiAttributedStringForEachAttributeFunc,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiAttributedStringNumGraphemes(s: *mut uiAttributedString) -> usize;
}
extern "C" {
    pub fn uiAttributedStringByteIndexToGrapheme(s: *mut uiAttributedString, pos: usize) -> usize;
}
extern "C" {
    pub fn uiAttributedStringGraphemeToByteIndex(s: *mut uiAttributedString, pos: usize) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiFontDescriptor {
    pub Family: *mut ::std::os::raw::c_char,
    pub Size: f64,
    pub Weight: uiTextWeight,
    pub Italic: uiTextItalic,
    pub Stretch: uiTextStretch,
}
extern "C" {
    pub fn uiLoadControlFont(f: *mut uiFontDescriptor);
}
extern "C" {
    pub fn uiFreeFontDescriptor(desc: *mut uiFontDescriptor);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiDrawTextLayout {
    _unused: [u8; 0],
}
pub type uiDrawTextAlign = ::std::os::raw::c_uint;
pub const uiDrawTextAlignLeft: ::std::os::raw::c_uint = 0;
pub const uiDrawTextAlignCenter: ::std::os::raw::c_uint = 1;
pub const uiDrawTextAlignRight: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiDrawTextLayoutParams {
    pub String: *mut uiAttributedString,
    pub DefaultFont: *mut uiFontDescriptor,
    pub Width: f64,
    pub Align: uiDrawTextAlign,
}
extern "C" {
    pub fn uiDrawNewTextLayout(params: *mut uiDrawTextLayoutParams) -> *mut uiDrawTextLayout;
}
extern "C" {
    pub fn uiDrawFreeTextLayout(tl: *mut uiDrawTextLayout);
}
extern "C" {
    pub fn uiDrawText(c: *mut uiDrawContext, tl: *mut uiDrawTextLayout, x: f64, y: f64);
}
extern "C" {
    pub fn uiDrawTextLayoutExtents(tl: *mut uiDrawTextLayout, width: *mut f64, height: *mut f64);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiFontButton {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiFontButtonFont(b: *mut uiFontButton, desc: *mut uiFontDescriptor);
}
extern "C" {
    pub fn uiFontButtonOnChanged(
        b: *mut uiFontButton,
        f: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut uiFontButton, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiNewFontButton() -> *mut uiFontButton;
}
extern "C" {
    pub fn uiFreeFontButtonFont(desc: *mut uiFontDescriptor);
}
pub type uiModifiers = ::std::os::raw::c_uint;
pub const uiModifierCtrl: ::std::os::raw::c_uint = 1;
pub const uiModifierAlt: ::std::os::raw::c_uint = 2;
pub const uiModifierShift: ::std::os::raw::c_uint = 4;
pub const uiModifierSuper: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiAreaMouseEvent {
    pub X: f64,
    pub Y: f64,
    pub AreaWidth: f64,
    pub AreaHeight: f64,
    pub Down: ::std::os::raw::c_int,
    pub Up: ::std::os::raw::c_int,
    pub Count: ::std::os::raw::c_int,
    pub Modifiers: uiModifiers,
    pub Held1To64: u64,
}
pub type uiExtKey = ::std::os::raw::c_uint;
pub const uiExtKeyEscape: ::std::os::raw::c_uint = 1;
pub const uiExtKeyInsert: ::std::os::raw::c_uint = 2;
pub const uiExtKeyDelete: ::std::os::raw::c_uint = 3;
pub const uiExtKeyHome: ::std::os::raw::c_uint = 4;
pub const uiExtKeyEnd: ::std::os::raw::c_uint = 5;
pub const uiExtKeyPageUp: ::std::os::raw::c_uint = 6;
pub const uiExtKeyPageDown: ::std::os::raw::c_uint = 7;
pub const uiExtKeyUp: ::std::os::raw::c_uint = 8;
pub const uiExtKeyDown: ::std::os::raw::c_uint = 9;
pub const uiExtKeyLeft: ::std::os::raw::c_uint = 10;
pub const uiExtKeyRight: ::std::os::raw::c_uint = 11;
pub const uiExtKeyF1: ::std::os::raw::c_uint = 12;
pub const uiExtKeyF2: ::std::os::raw::c_uint = 13;
pub const uiExtKeyF3: ::std::os::raw::c_uint = 14;
pub const uiExtKeyF4: ::std::os::raw::c_uint = 15;
pub const uiExtKeyF5: ::std::os::raw::c_uint = 16;
pub const uiExtKeyF6: ::std::os::raw::c_uint = 17;
pub const uiExtKeyF7: ::std::os::raw::c_uint = 18;
pub const uiExtKeyF8: ::std::os::raw::c_uint = 19;
pub const uiExtKeyF9: ::std::os::raw::c_uint = 20;
pub const uiExtKeyF10: ::std::os::raw::c_uint = 21;
pub const uiExtKeyF11: ::std::os::raw::c_uint = 22;
pub const uiExtKeyF12: ::std::os::raw::c_uint = 23;
pub const uiExtKeyN0: ::std::os::raw::c_uint = 24;
pub const uiExtKeyN1: ::std::os::raw::c_uint = 25;
pub const uiExtKeyN2: ::std::os::raw::c_uint = 26;
pub const uiExtKeyN3: ::std::os::raw::c_uint = 27;
pub const uiExtKeyN4: ::std::os::raw::c_uint = 28;
pub const uiExtKeyN5: ::std::os::raw::c_uint = 29;
pub const uiExtKeyN6: ::std::os::raw::c_uint = 30;
pub const uiExtKeyN7: ::std::os::raw::c_uint = 31;
pub const uiExtKeyN8: ::std::os::raw::c_uint = 32;
pub const uiExtKeyN9: ::std::os::raw::c_uint = 33;
pub const uiExtKeyNDot: ::std::os::raw::c_uint = 34;
pub const uiExtKeyNEnter: ::std::os::raw::c_uint = 35;
pub const uiExtKeyNAdd: ::std::os::raw::c_uint = 36;
pub const uiExtKeyNSubtract: ::std::os::raw::c_uint = 37;
pub const uiExtKeyNMultiply: ::std::os::raw::c_uint = 38;
pub const uiExtKeyNDivide: ::std::os::raw::c_uint = 39;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiAreaKeyEvent {
    pub Key: ::std::os::raw::c_char,
    pub ExtKey: uiExtKey,
    pub Modifier: uiModifiers,
    pub Modifiers: uiModifiers,
    pub Up: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiColorButton {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiColorButtonColor(
        b: *mut uiColorButton,
        r: *mut f64,
        g: *mut f64,
        bl: *mut f64,
        a: *mut f64,
    );
}
extern "C" {
    pub fn uiColorButtonSetColor(b: *mut uiColorButton, r: f64, g: f64, bl: f64, a: f64);
}
extern "C" {
    pub fn uiColorButtonOnChanged(
        b: *mut uiColorButton,
        f: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut uiColorButton, arg2: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiNewColorButton() -> *mut uiColorButton;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiForm {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiFormAppend(
        f: *mut uiForm,
        label: *const ::std::os::raw::c_char,
        c: *mut uiControl,
        stretchy: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiFormNumChildren(f: *mut uiForm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiFormDelete(f: *mut uiForm, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiFormPadded(f: *mut uiForm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiFormSetPadded(f: *mut uiForm, padded: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiNewForm() -> *mut uiForm;
}
pub type uiAlign = ::std::os::raw::c_uint;
pub const uiAlignFill: ::std::os::raw::c_uint = 0;
pub const uiAlignStart: ::std::os::raw::c_uint = 1;
pub const uiAlignCenter: ::std::os::raw::c_uint = 2;
pub const uiAlignEnd: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub type uiAt = ::std::os::raw::c_uint;
pub const uiAtLeading: ::std::os::raw::c_uint = 0;
pub const uiAtTop: ::std::os::raw::c_uint = 1;
pub const uiAtTrailing: ::std::os::raw::c_uint = 2;
pub const uiAtBottom: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiGrid {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiGridAppend(
        g: *mut uiGrid,
        c: *mut uiControl,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        xspan: ::std::os::raw::c_int,
        yspan: ::std::os::raw::c_int,
        hexpand: ::std::os::raw::c_int,
        halign: uiAlign,
        vexpand: ::std::os::raw::c_int,
        valign: uiAlign,
    );
}
extern "C" {
    pub fn uiGridInsertAt(
        g: *mut uiGrid,
        c: *mut uiControl,
        existing: *mut uiControl,
        at: uiAt,
        xspan: ::std::os::raw::c_int,
        yspan: ::std::os::raw::c_int,
        hexpand: ::std::os::raw::c_int,
        halign: uiAlign,
        vexpand: ::std::os::raw::c_int,
        valign: uiAlign,
    );
}
extern "C" {
    pub fn uiGridPadded(g: *mut uiGrid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiGridSetPadded(g: *mut uiGrid, padded: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiNewGrid() -> *mut uiGrid;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiImage {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiNewImage(width: f64, height: f64) -> *mut uiImage;
}
extern "C" {
    pub fn uiFreeImage(i: *mut uiImage);
}
extern "C" {
    pub fn uiImageAppend(
        i: *mut uiImage,
        pixels: *mut ::std::os::raw::c_void,
        pixelWidth: ::std::os::raw::c_int,
        pixelHeight: ::std::os::raw::c_int,
        byteStride: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiTableValue {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiFreeTableValue(v: *mut uiTableValue);
}
pub type uiTableValueType = ::std::os::raw::c_uint;
pub const uiTableValueTypeString: ::std::os::raw::c_uint = 0;
pub const uiTableValueTypeImage: ::std::os::raw::c_uint = 1;
pub const uiTableValueTypeInt: ::std::os::raw::c_uint = 2;
pub const uiTableValueTypeColor: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
extern "C" {
    pub fn uiTableValueGetType(v: *const uiTableValue) -> uiTableValueType;
}
extern "C" {
    pub fn uiNewTableValueString(str_: *const ::std::os::raw::c_char) -> *mut uiTableValue;
}
extern "C" {
    pub fn uiTableValueString(v: *const uiTableValue) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uiNewTableValueImage(img: *mut uiImage) -> *mut uiTableValue;
}
extern "C" {
    pub fn uiTableValueImage(v: *const uiTableValue) -> *mut uiImage;
}
extern "C" {
    pub fn uiNewTableValueInt(i: ::std::os::raw::c_int) -> *mut uiTableValue;
}
extern "C" {
    pub fn uiTableValueInt(v: *const uiTableValue) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiNewTableValueColor(r: f64, g: f64, b: f64, a: f64) -> *mut uiTableValue;
}
extern "C" {
    pub fn uiTableValueColor(
        v: *const uiTableValue,
        r: *mut f64,
        g: *mut f64,
        b: *mut f64,
        a: *mut f64,
    );
}
pub type uiSortIndicator = ::std::os::raw::c_uint;
pub const uiSortIndicatorNone: ::std::os::raw::c_uint = 0;
pub const uiSortIndicatorAscending: ::std::os::raw::c_uint = 1;
pub const uiSortIndicatorDescending: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiTableModel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiTableModelHandler {
    pub NumColumns: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut uiTableModelHandler,
            arg2: *mut uiTableModel,
        ) -> ::std::os::raw::c_int,
    >,
    pub ColumnType: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut uiTableModelHandler,
            arg2: *mut uiTableModel,
            arg3: ::std::os::raw::c_int,
        ) -> uiTableValueType,
    >,
    pub NumRows: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut uiTableModelHandler,
            arg2: *mut uiTableModel,
        ) -> ::std::os::raw::c_int,
    >,
    pub CellValue: ::std::option::Option<
        unsafe extern "C" fn(
            mh: *mut uiTableModelHandler,
            m: *mut uiTableModel,
            row: ::std::os::raw::c_int,
            column: ::std::os::raw::c_int,
        ) -> *mut uiTableValue,
    >,
    pub SetCellValue: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut uiTableModelHandler,
            arg2: *mut uiTableModel,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: *const uiTableValue,
        ),
    >,
}
extern "C" {
    pub fn uiNewTableModel(mh: *mut uiTableModelHandler) -> *mut uiTableModel;
}
extern "C" {
    pub fn uiFreeTableModel(m: *mut uiTableModel);
}
extern "C" {
    pub fn uiTableModelRowInserted(m: *mut uiTableModel, newIndex: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiTableModelRowChanged(m: *mut uiTableModel, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiTableModelRowDeleted(m: *mut uiTableModel, oldIndex: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiTableTextColumnOptionalParams {
    pub ColorModelColumn: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiTableParams {
    pub Model: *mut uiTableModel,
    pub RowBackgroundColorModelColumn: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uiTable {
    _unused: [u8; 0],
}
extern "C" {
    pub fn uiTableAppendTextColumn(
        t: *mut uiTable,
        name: *const ::std::os::raw::c_char,
        textModelColumn: ::std::os::raw::c_int,
        textEditableModelColumn: ::std::os::raw::c_int,
        textParams: *mut uiTableTextColumnOptionalParams,
    );
}
extern "C" {
    pub fn uiTableAppendImageColumn(
        t: *mut uiTable,
        name: *const ::std::os::raw::c_char,
        imageModelColumn: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiTableAppendImageTextColumn(
        t: *mut uiTable,
        name: *const ::std::os::raw::c_char,
        imageModelColumn: ::std::os::raw::c_int,
        textModelColumn: ::std::os::raw::c_int,
        textEditableModelColumn: ::std::os::raw::c_int,
        textParams: *mut uiTableTextColumnOptionalParams,
    );
}
extern "C" {
    pub fn uiTableAppendCheckboxColumn(
        t: *mut uiTable,
        name: *const ::std::os::raw::c_char,
        checkboxModelColumn: ::std::os::raw::c_int,
        checkboxEditableModelColumn: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiTableAppendCheckboxTextColumn(
        t: *mut uiTable,
        name: *const ::std::os::raw::c_char,
        checkboxModelColumn: ::std::os::raw::c_int,
        checkboxEditableModelColumn: ::std::os::raw::c_int,
        textModelColumn: ::std::os::raw::c_int,
        textEditableModelColumn: ::std::os::raw::c_int,
        textParams: *mut uiTableTextColumnOptionalParams,
    );
}
extern "C" {
    pub fn uiTableAppendProgressBarColumn(
        t: *mut uiTable,
        name: *const ::std::os::raw::c_char,
        progressModelColumn: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiTableAppendButtonColumn(
        t: *mut uiTable,
        name: *const ::std::os::raw::c_char,
        buttonModelColumn: ::std::os::raw::c_int,
        buttonClickableModelColumn: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn uiTableHeaderVisible(t: *mut uiTable) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiTableHeaderSetVisible(t: *mut uiTable, visible: ::std::os::raw::c_int);
}
extern "C" {
    pub fn uiNewTable(params: *mut uiTableParams) -> *mut uiTable;
}
extern "C" {
    pub fn uiTableHeaderSetSortIndicator(
        t: *mut uiTable,
        column: ::std::os::raw::c_int,
        indicator: uiSortIndicator,
    );
}
extern "C" {
    pub fn uiTableHeaderSortIndicator(
        t: *mut uiTable,
        column: ::std::os::raw::c_int,
    ) -> uiSortIndicator;
}
extern "C" {
    pub fn uiTableHeaderOnClicked(
        t: *mut uiTable,
        f: ::std::option::Option<
            unsafe extern "C" fn(
                table: *mut uiTable,
                column: ::std::os::raw::c_int,
                data: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn uiTableColumnWidth(
        t: *mut uiTable,
        column: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uiTableColumnSetWidth(
        t: *mut uiTable,
        column: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
    );
}
